<?php

function d3_draw($chart) {

  $type = isset($chart['type']) ? $chart['type'] : NULL;

  // require the type
  if (!$type) {
    drupal_set_message("No chart type specified");
  }

  // form library name - convention is going to be d3.[library]
  $library_name = 'd3.' . strtolower($type);

  if ($library = libraries_detect($library_name)) {
    libraries_load($library_name);

    $js = array(
      'd3' => array(
        'inventory' => array($chart['id'] => $chart),
      ),
    );
    drupal_add_js($js, 'setting');
    return '<div id="' . $chart['id'] . '"></div>';
  }
  else {
    drupal_set_message(t('Invalid chart type !type and/or library !library_name is not installed', array('!type' => $type, '!library_name' => $library_name)));
    return '';
  }
}

function d3_graphapi_formats() {
  return array(
    'd3' => t('D3'),
  );
}

function d3_graphapi_settings_form($values) {
 
  $engine = 'd3'; 
  $form[$engine] = array(
    '#type' => 'fieldset',
    '#title' => 'D3 settings',
  );

  return $form;
  
}

function d3_theme() {
  return array(
    'd3_graphapi' => array(
      'variables' => array(
        'graph' => NULL,
        'config' => NULL,
      ),
    ),
  );
} 

function _d3_graphapi_format_graph_data($graph) {
  $data = array();
  $indices = array();
  $index = 0;

  foreach ($graph as $id => $node) {
    $indices[$id] = $index;
    $index++;
  }

  // add in edges
  foreach ($graph as $id => $node) {
    $index = $indices[$id];
    $data['nodes'][$index] = array(
      'name' => $node['data']['title'],
      'group' => isset($node['data']['group']) ? $node['data']['group'] : 1,
      'data' => $node['data'],
    );
    if(count($node['edges']) > 0) {
      foreach($node['edges'] as $edge=>$edge_data) {
        $value = isset($edge_data['data']['value']) ? (int) $edge_data['data']['value'] : null;
         
        $data['links'][] = array(
          'data' => isset($edge_data['data']) ? $edge_data['data'] : array(),
          'source' => $index,
          'target' => $indices[$edge],
          'value' => $value, //TODO hard coded should be dynamic
        );
      }
    }
  }

  return $data;
}

function theme_d3_graphapi($vars) {
  $graph = _d3_graphapi_format_graph_data($vars['graph']);
  $chart = array(
    'id' => 'visualization',
    'type' => 'ForceDirected',
    'links' => $graph['links'],
    'nodes' => $graph['nodes'],
    'config' => $vars['config'],
  );
  return d3_draw($chart);
}

/**
 * Implements hook_graphapi_default_settings().
 *
 * We reuse the default settings from thejit_forcedirected_default_settings.
 *
 * @see thejit_forcedirected_default_settings()
 * @see views_object::option_definition()
 */
function d3_graphapi_default_settings() {
  $engine = 'd3';
  $values = array();
  return graphapi_settings_to_views($engine, $values);
}

function template_preprocess_views_graphapi_style_d3(&$vars) {
  dsm($vars);
}

/**
 * Implements hook_libraries_paths().
 */
function d3_libraries_info_file_paths() {

  $libraries = libraries_get_libraries();

  $paths = array();

  foreach ($libraries as $id => $path) {
    $paths[] = $path;
  }

  return $paths;
}

/**
 * Implements hook_requirements()
 */
function d3_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $t = get_t();
    if ($path = libraries_get_path('d3')) {
      if (file_exists($path . '/d3.v2.min.js')) {
        $requirements['d3'] = array(
          'title' => $t('D3'),
          'value' => $t('d3.v2.min.js found under !path', array('!path' => $path . '/d3.v2.min.js')),
          'severity' => REQUIREMENT_OK,
        );
        return $requirements;
      }
    }
    $requirements['d3'] = array(
      'title' => $t('D3'),
      'value' => isset($lib['error message']) ? $t($lib['error message']) : t('D3 library was not found. !download the library and place in under sites/all/libraries/d3, so that the library can be found at sites/all/libraries/d3/d3.v2.min.js.', array(
        '!download' => l(t('Download'), 'https://github.com/mbostock/d3'))
      ),
      'severity' => REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_libraries_info().
 */
function d3_libraries_info() {

  $libraries = array();

  // drupal ext adds behaviors and d3 global object
  $libraries['d3.drupal'] = array(
    'name' => 'D3 Drupal ext',
    'vendor url' => 'http://drupal.org/sandbox/asherry/1477334',
    'files' => array(
      'js' => array(
        'd3.js',
      ),
    ),
    'path' => 'js',
    'library path' => drupal_get_path('module', 'd3'),
    'version' => '1',
  );

  $libraries['d3'] = array(
    'name' => 'D3',
    'vendor url' => 'http://d3js.org/',
    'download url' => 'https://github.com/mbostock/d3',
    'files' => array(
      'js' => array(
        'd3.v2.min.js',
      ),
    ),
    'version' => '2',
    'dependencies' => array('d3.drupal'),
  );

  return $libraries;
}

